{"version":3,"sources":["sockjs/client.jsx","config/GlobalConstant.js","api/ApiCaller.js","holder/UserContextHolder.js","component/MessageBox.js","component/MessageListViewer.js","action/UserAction.js","page/chat/ChatRoom.js","component/user/OnlineUserItem.js","page/OnlineUsers.js","App.js","serviceWorker.js","index.js"],"names":["SockJsClient","props","_initStompClient","client","Stomp","over","SockJS","url","options","heartbeat","outgoing","incoming","Object","keys","includes","heartbeatIncoming","heartbeatOutgoing","debug","_cleanUp","setState","connected","retryCount","subscriptions","clear","_log","msg","console","log","_subscribe","topic","has","sub","subscribe","onMessage","_processMessage","body","headers","destination","subscribeHeaders","set","msgBody","JSON","parse","e","_unsubscribe","get","unsubscribe","delete","_connect","connect","topics","forEach","onConnect","error","onConnectFailure","stack","state","onDisconnect","autoReconnect","explicitDisconnect","_timeoutId","setTimeout","getRetryInterval","disconnect","clearTimeout","subid","sendMessage","optHeaders","Error","send","Map","this","nextProps","nextState","difference","oldTopic","newTopic","React","Component","defaultProps","count","GlobalConstant","WEB_SOCKET_URL_SUFFIX","FULL_WEB_SOCKET_URL","HTTP_PROTOCOL","DOMAIN_NAME","ApiCaller","data","callback","errorCallback","onResp","callUrl","key","call","method","jsonData","stringify","request","GLOBAL_CONST","mode","fetch","then","res","undefined","json","catch","ORIGIN_URL","REST_API_PREFIX","REST_API_ENDPOINT","GET_USER_CONTEXT","PREPARE_ROOM","GET_LAST_MESSAGES_FROM_ROOM","SEND_MESSAGE_TO_ROOM","UserContextHolder","user","userHolder","onlineUsers","onlineUsersHolder","MessageBox","message","messageAuthor","author","authorFullName","isMine","userId","avatar","userAvatar","startsSequence","startSequence","endsSequence","endSequence","friendlyTimestamp","Date","messageRowForTooltip","getMessageRowForTooltip","className","join","mine","Avatar","src","style","title","MessageListViewer","scrollArea","scrollBottom","messages","length","messageBoxes","map","value","ref","speed","minScrollSize","height","UserAction","roomId","onGetMessage","getCall","onRecive","resp","ChatRoom","roomTittle","isLoaded","clientRef","messageList","messageBox","getLastDataForRoom","bind","forceUpdate","onRes","container","direction","justify","alignItems","xs","id","label","inputRef","multiline","defaultValue","variant","fullWidth","margin","width","marginRight","color","onClick","unshift","jsSock","prepareJsSock","marginTop","component","disableSpacing","renderTextForm","renderChat","roomTitle","StyledBadge","withStyles","theme","badge","backgroundColor","boxShadow","palette","background","paper","position","top","left","borderRadius","animation","border","content","transform","opacity","Badge","OnlineUserItem","prepareAvatar","isOnline","primary","userName","secondary","Fragment","overlap","anchorOrigin","vertical","horizontal","alt","OnlineUsers","users","onlineUser","prepareUsers","usersClone","userIndex","push","foundUserIndex","findUserIndex","list","onlineUserItems","getOnlineUserItems","onSendButtomClicked","index","onSendButtonClicked","App","isReady","chatRoom","nextContext","prepareRoomForUser","userDataDtoSet","getUserContext","historicalMessagesDTO","changeRoom","lastRoomId","getSetUserHolder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dddf0396.chunk.js","sourcesContent":["import React from 'react'\r\nimport SockJS from 'sockjs-client'\r\nimport Stomp from 'stompjs'\r\nimport PropTypes from 'prop-types'\r\nimport difference from 'lodash/difference'\r\n\r\n/**\r\n * React component for SockJS-client with STOMP messaging protocol.\r\n *\r\n * @version 5.0.0\r\n * @author [lahsivjar] (https://github.com/lahsivjar)\r\n * @see {@link https://stomp.github.io/|STOMP}\r\n * @see {@link https://github.com/sockjs/sockjs-client|StompJS}\r\n */\r\nclass SockJsClient extends React.Component {\r\n    static defaultProps = {\r\n        onConnect: () => {},\r\n        onDisconnect: () => {},\r\n        getRetryInterval: (count) => { return 1000 * count },\r\n        options: {},\r\n        headers: {},\r\n        subscribeHeaders: {},\r\n        autoReconnect: true,\r\n        debug: false,\r\n        heartbeat: 10000\r\n    }\r\n\r\n    static propTypes = {\r\n        /**\r\n         * HTTP URL of the endpoint to connect.\r\n         */\r\n        url: PropTypes.string.isRequired,\r\n        /**\r\n         * Additional options to pass to the underlying SockJS constructor.\r\n         *\r\n         * @see [SockJS-options](https://github.com/sockjs/sockjs-client#sockjs-client-api)\r\n         */\r\n        options: PropTypes.object,\r\n        /**\r\n         * Array of topics to subscribe to.\r\n         */\r\n        topics: PropTypes.array.isRequired,\r\n        /**\r\n         * Callback after connection is established.\r\n         */\r\n        onConnect: PropTypes.func,\r\n        /**\r\n         * Callback after connection is lost.\r\n         */\r\n        onDisconnect: PropTypes.func,\r\n        /**\r\n         * Gets called to find the time interval for next retry. Defaults to a function returing retryCount seconds.\r\n         *\r\n         * @param {number} retryCount number of retries for the current disconnect\r\n         */\r\n        getRetryInterval: PropTypes.func,\r\n        /**\r\n         * Callback when a message is recieved.\r\n         *\r\n         * @param {(string|Object)} msg message received from server, if JSON format then object\r\n         * @param {string} topic the topic on which the message was received\r\n         */\r\n        onMessage: PropTypes.func.isRequired,\r\n        /**\r\n         * Headers that will be passed to the server or broker with STOMP's connection frame.\r\n         */\r\n        headers: PropTypes.object,\r\n        /**\r\n         * Headers that will be passed when subscribing to a destination.\r\n         */\r\n        subscribeHeaders: PropTypes.object,\r\n        /**\r\n         * Should the client try to automatically connect in an event of disconnection.\r\n         */\r\n        autoReconnect: PropTypes.bool,\r\n        /**\r\n         * Enable debugging mode.\r\n         */\r\n        debug: PropTypes.bool,\r\n        /**\r\n         * Number of milliseconds to send and expect heartbeat messages.\r\n         */\r\n        heartbeat: PropTypes.number,\r\n        /**\r\n         * Number of milliseconds to expect heartbeat messages\r\n         */\r\n        heartbeatIncoming: PropTypes.number,\r\n        /**\r\n         * Number of milliseconds to send heartbeat messages\r\n         */\r\n        heartbeatOutgoing: PropTypes.number,\r\n        /**\r\n         * Callback if connection could not be established\r\n         */\r\n        onConnectFailure: PropTypes.func\r\n    }\r\n\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            connected: false,\r\n            // False if disconnect method is called without a subsequent connect\r\n            explicitDisconnect: false\r\n        }\r\n\r\n        this.subscriptions = new Map()\r\n        this.retryCount = 0\r\n    }\r\n\r\n    componentDidMount () {\r\n        this._connect()\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        this.disconnect()\r\n    }\r\n\r\n    shouldComponentUpdate (nextProps, nextState) {\r\n        return false\r\n    }\r\n\r\n    /* eslint camelcase: [\"error\", {allow: [\"UNSAFE_componentWillReceiveProps\"]}] */\r\n\r\n    UNSAFE_componentWillReceiveProps (nextProps) {\r\n        if (this.state.connected) {\r\n\r\n            // Unsubscribe from old topics\r\n            difference(this.props.topics, nextProps.topics)\r\n                .forEach((oldTopic) => {\r\n                    this._log('Unsubscribing from topic: ' + oldTopic)\r\n                    this._unsubscribe(oldTopic)\r\n                })\r\n\r\n            // Subscribe to new topics\r\n            difference(nextProps.topics, this.props.topics)\r\n                .forEach((newTopic) => {\r\n                    this._log('Subscribing to topic: ' + newTopic)\r\n                    this._subscribe(newTopic)\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return null\r\n    }\r\n\r\n    _initStompClient = () => {\r\n        // Websocket held by stompjs can be opened only once\r\n        this.client = Stomp.over(new SockJS(this.props.url, null, this.props.options))\r\n\r\n        this.client.heartbeat.outgoing = this.props.heartbeat\r\n        this.client.heartbeat.incoming = this.props.heartbeat\r\n\r\n        if (Object.keys(this.props).includes('heartbeatIncoming')) {\r\n            this.client.heartbeat.incoming = this.props.heartbeatIncoming\r\n        }\r\n        if (Object.keys(this.props).includes('heartbeatOutgoing')) {\r\n            this.client.heartbeat.outgoing = this.props.heartbeatOutgoing\r\n        }\r\n        if (!this.props.debug) {\r\n            this.client.debug = () => {}\r\n        }\r\n    }\r\n\r\n    _cleanUp = () => {\r\n        this.setState({ connected: false })\r\n        this.retryCount = 0\r\n        this.subscriptions.clear()\r\n    }\r\n\r\n    _log = (msg) => {\r\n        if (this.props.debug) {\r\n            console.log(msg)\r\n        }\r\n    }\r\n\r\n    _subscribe = (topic) => {\r\n        if (!this.subscriptions.has(topic)) {\r\n            let sub = this.client.subscribe(topic, (msg) => {\r\n                this.props.onMessage(this._processMessage(msg.body), msg.headers.destination)\r\n            }, this.props.subscribeHeaders)\r\n            this.subscriptions.set(topic, sub)\r\n        }\r\n    }\r\n\r\n    _processMessage = (msgBody) => {\r\n        try {\r\n            return JSON.parse(msgBody)\r\n        } catch (e) {\r\n            return msgBody\r\n        }\r\n    }\r\n\r\n    _unsubscribe = (topic) => {\r\n        let sub = this.subscriptions.get(topic)\r\n        sub.unsubscribe()\r\n        this.client.unsubscribe(topic);\r\n        this.subscriptions.delete(topic)\r\n    }\r\n\r\n    _connect = () => {\r\n        this._initStompClient()\r\n        this.client.connect(this.props.headers, () => {\r\n            this.setState({ connected: true })\r\n            this.props.topics.forEach((topic) => {\r\n                this._subscribe(topic)\r\n            })\r\n            this.props.onConnect()\r\n        }, (error) => {\r\n            if (error) {\r\n                if (Object.keys(this.props).includes('onConnectFailure')) {\r\n                    this.props.onConnectFailure(error)\r\n                } else {\r\n                    this._log(error.stack)\r\n                }\r\n            }\r\n            if (this.state.connected) {\r\n                this._cleanUp()\r\n                // onDisconnect should be called only once per connect\r\n                this.props.onDisconnect()\r\n            }\r\n            if (this.props.autoReconnect && !this.state.explicitDisconnect) {\r\n                this._timeoutId = setTimeout(this._connect, this.props.getRetryInterval(this.retryCount++))\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Connect to the server if not connected. Under normal circumstances component\r\n     * will automatically try to connect to server. This method is mostly useful\r\n     * after component is explicitly disconnected via {@link SockJsClient#disconnect}.\r\n     *\r\n     * @public\r\n     */\r\n    connect = () => {\r\n        this.setState({ explicitDisconnect: false })\r\n        if (!this.state.connected) {\r\n            this._connect()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect STOMP client and disable all reconnect.\r\n     *\r\n     * @public\r\n     */\r\n    disconnect = () => {\r\n        // On calling disconnect explicitly no effort will be made to reconnect\r\n        // Clear timeoutId in case the component is trying to reconnect\r\n        if (this._timeoutId) {\r\n            clearTimeout(this._timeoutId)\r\n            this._timeoutId = null\r\n        }\r\n        this.setState({ explicitDisconnect: true })\r\n        if (this.state.connected) {\r\n            this.subscriptions.forEach((subid, topic) => {\r\n                this._unsubscribe(topic)\r\n            })\r\n            this.client.disconnect(() => {\r\n                this._cleanUp()\r\n                this.props.onDisconnect()\r\n                this._log('Stomp client is successfully disconnected!')\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send message to the specified topic.\r\n     *\r\n     * @param {string} topic target topic to send message\r\n     * @param {string} msg message to send\r\n     * @param {Object} [opt_headers={}] additional headers for underlying STOMP client\r\n     * @public\r\n     */\r\n    sendMessage = (topic, msg, optHeaders = {}) => {\r\n        if (this.state.connected) {\r\n            this.client.send(topic, optHeaders, msg)\r\n        } else {\r\n            throw new Error('Send error: SockJsClient is disconnected')\r\n        }\r\n    }\r\n}\r\n\r\nexport default SockJsClient\r\n","class GlobalConstant {\r\n   // static HTTP_PROTOCOL = \"http://\";\r\n    //static DOMAIN_NAME = \"pwa-2021.herokuapp.com\";\r\n\r\n    static WEB_SOCKET_URL_SUFFIX = \"/ws\";\r\n\r\n    static HTTP_PROTOCOL = \"http://\";\r\n    static DOMAIN_NAME = \"localhost:8080\";\r\n    static FULL_WEB_SOCKET_URL = GlobalConstant.HTTP_PROTOCOL + GlobalConstant.DOMAIN_NAME + GlobalConstant.WEB_SOCKET_URL_SUFFIX;\r\n\r\n}\r\n\r\nexport default GlobalConstant;\r\n","import GLOBAL_CONST from \"../config/GlobalConstant\";\r\n\r\nclass ApiCaller {\r\n\r\n    static ORIGIN_URL = GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME;\r\n    static REST_API_PREFIX = \"/api/v1\";\r\n    static REST_API_ENDPOINT = ApiCaller.ORIGIN_URL + ApiCaller.REST_API_PREFIX;\r\n\r\n    static GET_USER_CONTEXT = \"/user/context\";\r\n    static PREPARE_ROOM = ApiCaller.REST_API_PREFIX + \"/room/prepare\";\r\n    static GET_LAST_MESSAGES_FROM_ROOM = ApiCaller.REST_API_ENDPOINT + \"/room/messages\";\r\n    static SEND_MESSAGE_TO_ROOM = ApiCaller.REST_API_ENDPOINT + \"/send\";\r\n\r\n    static getCall(url, data, callback, errorCallback, onResp) {\r\n        let callUrl = url;\r\n        if(data !== null) {\r\n            const keys = Object.keys(data);\r\n            callUrl = callUrl + \"?\";\r\n            for (let key in keys) {\r\n                callUrl += keys[key] + \"=\" + data[keys[key]] + \"&\";\r\n            }\r\n        }\r\n        this.call(callUrl, \"GET\", null, callback, errorCallback, onResp);\r\n    }\r\n\r\n    static call(url, method, data, callback, errorCallback, onResp) {\r\n        let jsonData = (data !== null)? JSON.stringify(data): null;\r\n\r\n        let request = {\r\n            method: method,\r\n            headers: {\r\n                'Origin': GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Set-cookies, Authorization'\r\n            },\r\n            mode: \"cors\"\r\n        };\r\n\r\n        if(jsonData !== null) {\r\n            request[\"body\"] = jsonData;\r\n        }\r\n\r\n        fetch(url, request)\r\n            .then(res => {\r\n                if (onResp !== undefined) {\r\n                    return onResp(res);\r\n                } else {\r\n                    return res.json();\r\n                }\r\n            })\r\n            .then((data) => {\r\n                    callback(data);\r\n            })\r\n            .catch((data) => {\r\n                if (errorCallback !== undefined) {\r\n                    errorCallback(data);\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default ApiCaller;\r\n","import ApiCaller from \"../api/ApiCaller\";\r\n\r\nclass UserContextHolder {\r\n    static userHolder = null;\r\n    static onlineUsersHolder = null;\r\n\r\n    setUserContext(user) {\r\n        UserContextHolder.userHolder = user;\r\n    }\r\n\r\n    getUserContext() {\r\n        return UserContextHolder.userHolder;\r\n    }\r\n\r\n    setOnlineUsers(onlineUsers) {\r\n        UserContextHolder.onlineUsersHolder = onlineUsers;\r\n    }\r\n\r\n    getOnlineUsers() {\r\n        return UserContextHolder.userHolder;\r\n    }\r\n}\r\n\r\nexport default UserContextHolder;\r\n","import * as React from \"react\";\r\n//import moment from 'moment';\r\nimport './Message.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport UserContextHolder from \"../holder/UserContextHolder\";\r\n\r\n\r\nclass MessageBox extends React.Component {\r\n\r\n    render() {\r\n        const message = this.props.message.message;\r\n        const messageAuthor = this.props.message.author.authorFullName;\r\n        const isMine = this.props.message.author.userId === UserContextHolder.userHolder.userId;\r\n        const avatar = this.props.message.author.userAvatar;\r\n        const startsSequence = (this.props.startSequence) ? this.props.startSequence : \"start\";\r\n        const endsSequence = (this.props.endSequence) ? this.props.endSequence : \"end\";\r\n        const showTimestamp = false;\r\n        const friendlyTimestamp = \"\" + new Date();\r\n\r\n        let messageRowForTooltip = this.getMessageRowForTooltip(messageAuthor, avatar, message, isMine, friendlyTimestamp);\r\n        return (\r\n                <div className={[\r\n                    'message',\r\n                    `${isMine ? 'mine' : ''}`,\r\n                    `${startsSequence ? 'start' : ''}`,\r\n                    `${endsSequence ? 'end' : ''}`\r\n                ].join(' ')}>\r\n                    {\r\n                        showTimestamp &&\r\n                        <div className=\"timestamp\">\r\n                            {friendlyTimestamp}\r\n                        </div>\r\n\r\n\r\n                    }\r\n                    {messageRowForTooltip}\r\n                </div>\r\n        );\r\n    }\r\n\r\n    getMessageRowForTooltip(messageAuthor, avatar, message, mine, friendlyTimestamp) {\r\n        if (!mine) {\r\n            return (\r\n                <div className=\"bubble-container\">\r\n\r\n                        <Avatar src={avatar} style={{\"margin\": \"auto 0 auto 0\"}}>\r\n                            B\r\n                        </Avatar>\r\n                        <div className=\"bubble\" title={friendlyTimestamp}>\r\n                            {message}\r\n                        </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div className=\"bubble-container\">\r\n\r\n                    <div className=\"bubble\">\r\n                        {message}\r\n                    </div>\r\n                    <Avatar src={avatar} style={{\"margin\": \"auto 0 auto 0\"}}>\r\n                        B\r\n                    </Avatar>\r\n            </div>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n","import * as React from \"react\";\r\nimport MessageBox from \"./MessageBox\";\r\nimport ScrollArea from 'react-scrollbar';\r\n\r\nclass MessageListViewer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.scrollArea = null;\r\n    }\r\n\r\n    onNewMessage() {\r\n        if(this.scrollArea !== null) {\r\n            this.scrollArea.scrollBottom();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const messages = this.props.messages;\r\n        if (messages.length > 0) {\r\n            let messageBoxes = messages.map((value, key) => {\r\n                return (\r\n                        <MessageBox message={value}/>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <ScrollArea ref={(e) => {\r\n                    this.scrollArea = e;\r\n                }}\r\n                            speed={0.8}\r\n                            minScrollSize={400}\r\n                            style={{height: \"500px\"}}\r\n                >\r\n                    <div>\r\n                        {messageBoxes}\r\n                    </div>\r\n                </ScrollArea>\r\n            );\r\n        } else {\r\n            return (<div/>);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default MessageListViewer;\r\n","import ApiCaller from \"../api/ApiCaller\";\r\n\r\nclass UserAction {\r\n\r\n   static getLastDataForRoom(roomId, onGetMessage) {\r\n        ApiCaller.getCall(\r\n            ApiCaller.GET_LAST_MESSAGES_FROM_ROOM,\r\n            {\r\n                \"roomID\": roomId\r\n            },\r\n            (res) => {\r\n                onGetMessage(res);\r\n            },\r\n            (res) => {\r\n                console.error(res);\r\n            });\r\n    }\r\n\r\n    static sendMessage(roomId, value, onRecive) {\r\n        ApiCaller.call(ApiCaller.SEND_MESSAGE_TO_ROOM,\r\n            \"POST\",\r\n            {\r\n                \"roomId\": roomId,\r\n                \"message\": value\r\n            },\r\n            (resp) => {\r\n                onRecive();\r\n            }\r\n        );\r\n    }\r\n\r\n    static getUserContext(onRecive) {\r\n        ApiCaller.getCall(ApiCaller.GET_USER_CONTEXT,\r\n            null,\r\n            (resp) => {\r\n                onRecive(resp);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserAction;\r\n","import React from \"react\";\r\nimport SockJsClient from \"../../sockjs/client\"\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Card from \"@material-ui/core/Card/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions/CardActions\";\r\nimport MessageListViewer from \"../../component/MessageListViewer\";\r\nimport GlobalConstant from \"../../config/GlobalConstant\";\r\nimport UserAction from \"../../action/UserAction\"\r\n\r\nclass ChatRoom extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            roomId: props.roomId,\r\n            roomTittle: props.title,\r\n            isLoaded: props.messages !== undefined,\r\n            messages: props.messages\r\n        };\r\n        this.clientRef = null;\r\n        this.messageList = null;\r\n        this.messageBox = null;\r\n    }\r\n\r\n    renderChat(roomId) {\r\n        this.getLastDataForRoom(roomId);\r\n        return (<div/>);\r\n    }\r\n\r\n    changeRoom(roomId, title, messages) {\r\n        this.getLastDataForRoom(roomId, title, messages);\r\n    }\r\n\r\n    getLastDataForRoom(roomId, title, messages) {\r\n        if (messages === null || messages === undefined) {\r\n            UserAction.getLastDataForRoom(roomId, this.onGetMessage.bind(this));\r\n        } else {\r\n            this.setState({\r\n                messages: messages,\r\n                isLoaded: true,\r\n                roomId: roomId,\r\n                roomTittle: title\r\n            });\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    sendMessage(roomId, value, onRes) {\r\n        UserAction.sendMessage(roomId, value, onRes);\r\n    }\r\n\r\n    renderTextForm(roomId) {\r\n        console.log(roomId);\r\n        return (\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\">\r\n                <Grid xs={8}>\r\n                    <TextField\r\n                        id=\"message_text\"\r\n                        label=\"Message\"\r\n                        inputRef={(e) => {\r\n                            this.messageBox = e\r\n                        }}\r\n                        multiline\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={{margin: \"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                    <Button variant=\"contained\" style={{width: \"100%\", height: \"100%\", marginRight: \"10px\"}}\r\n                            color={\"primary\"}\r\n                            onClick={(e) => {\r\n                                const value = this.messageBox.value;\r\n                                this.sendMessage(roomId, value, () => {\r\n                                    this.messageBox.value = \"\";\r\n                                });\r\n                            }}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    onMessage(message) {\r\n        const messageList = this.state.messages;\r\n        messageList.unshift(message);\r\n        this.setState({messages: messageList});\r\n    }\r\n\r\n    render() {\r\n        const roomId = this.state.roomId;\r\n        let jsSock = this.prepareJsSock(roomId);\r\n        console.log(roomId);\r\n        if (!this.state.isLoaded) {\r\n            return this.renderChat(roomId)\r\n        } else {\r\n            return (\r\n                <Card style={{marginTop: \"20px\"}}>\r\n                    <CardHeader title={\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {this.state.roomTittle}\r\n                        </Typography>\r\n                    }/>\r\n                    <CardContent>\r\n                        <MessageListViewer messages={\r\n                            this.state.messages\r\n                        }\r\n                                           ref={(e) => this.messageList = e}/>\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        {jsSock}\r\n                        {this.renderTextForm(roomId)}\r\n                    </CardActions>\r\n\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    prepareJsSock(roomId) {\r\n        return (<SockJsClient url={GlobalConstant.FULL_WEB_SOCKET_URL} topics={['/topics/room/' + roomId]}\r\n                              onMessage={this.onMessage.bind(this)}\r\n                              autoReconnect={true}\r\n                              onConnect={(e) => {\r\n                                  console.log(e);\r\n                                }\r\n                              }\r\n                              onDisconnect={console.log(\"Disconnected!\")}\r\n                              ref={(client) => {\r\n                                  this.clientRef = client\r\n                              }}\r\n                              debug={true}/>);\r\n    }\r\n\r\n    onGetMessage(res) {\r\n        const messages = res.messages;\r\n        this.setState({\r\n            messages: messages,\r\n            isLoaded: true,\r\n            roomTittle: res.roomTitle,\r\n            roomId: res.roomId\r\n        });\r\n    }\r\n}\r\n\r\nexport default ChatRoom;\r\n","import {Component} from \"react\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\nimport {withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nclass OnlineUserItem extends Component {\r\n\r\n    render() {\r\n        let prepareAvatar = this.prepareAvatar(this.props.isOnline);\r\n\r\n        return (\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    {prepareAvatar}\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={this.props.user.userName}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                color=\"textPrimary\"\r\n                            >\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={\r\n                                    (e) =>\r\n                                    {this.props.onClick(this.props.user.userId)}\r\n                                }>\r\n                                    Send Message\r\n                                </Button>\r\n                            </Typography>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n            </ListItem>);\r\n    }\r\n\r\n    prepareAvatar(isOnline) {\r\n        if(isOnline) {\r\n            return (\r\n                <StyledBadge\r\n                    overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    <Avatar alt={this.props.user.userName} src={this.props.user.avatar} />\r\n                </StyledBadge>\r\n            );\r\n        } else {\r\n            return (\r\n                <Avatar alt={this.props.user.userName} src={this.props.user.avatar} />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default OnlineUserItem;\r\n","import {Component} from \"react\";\r\nimport SockJsClient from \"react-stomp\";\r\nimport GlobalConstant from \"../config/GlobalConstant\";\r\nimport React from \"react\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Divider from \"@material-ui/core/Divider/Divider\";\r\nimport OnlineUserItem from \"../component/user/OnlineUserItem\";\r\nimport UserContextHolder from \"../holder/UserContextHolder\";\r\n\r\nclass OnlineUsers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {users: props.users}\r\n    }\r\n\r\n    onMessage(data) {\r\n        UserContextHolder.onlineUsersHolder = data;\r\n        let onlineUser = this.prepareUsers(data);\r\n        this.setState({users: onlineUser});\r\n    }\r\n\r\n    prepareUsers(onlineUser) {\r\n        let usersClone = this.state.users;\r\n        let users = [];\r\n        for(let userIndex in usersClone) {\r\n            users.push(\r\n                {\r\n                    userId: usersClone[userIndex].userId,\r\n                    isOnline: false,\r\n                    userName: usersClone[userIndex].userName,\r\n                    avatar: usersClone[userIndex].avatar\r\n                }\r\n            );\r\n        }\r\n        if(onlineUser !== null && onlineUser !== undefined) {\r\n            for(let userIndex in onlineUser) {\r\n                let user = onlineUser[userIndex];\r\n                let foundUserIndex = this.findUserIndex(user.userId, users);\r\n\r\n                if(foundUserIndex == -1) {\r\n                    user.isOnline = true;\r\n                    users.push({\r\n                        userId: user[userIndex].userId,\r\n                        isOnline: true,\r\n                        userName: user[userIndex].userName,\r\n                        avatar: user[userIndex].avatar}\r\n                        );\r\n                } else {\r\n                    let inStateUser = users[foundUserIndex];\r\n                    inStateUser.isOnline = true;\r\n                }\r\n            }\r\n            return users;\r\n        }\r\n        return users;\r\n    }\r\n\r\n\r\n\r\n    findUserIndex(userId, list) {\r\n        if(list === null || list === undefined)\r\n            return -1;\r\n        for(let user in list) {\r\n            if(list[user].userId === userId) {\r\n                return user;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    render() {\r\n        let onlineUserItems = this.getOnlineUserItems();\r\n        return (\r\n            <div>\r\n                <SockJsClient url={GlobalConstant.FULL_WEB_SOCKET_URL} topics={['/topics/user/online']}\r\n                              onMessage={this.onMessage.bind(this)}\r\n                              ref={(client) => {\r\n                                  this.clientRef = client\r\n                              }}\r\n                              />\r\n                <Typography variant=\"h4\" component=\"h4\" style={{\"textAlign\":\"center\"}}>\r\n                   Users\r\n                </Typography>\r\n                <Divider/>\r\n                <List>\r\n                    {onlineUserItems}\r\n                </List>\r\n                <Divider/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSendButtonClicked(userId) {\r\n        this.props.onSendButtomClicked(userId);\r\n    }\r\n\r\n    getOnlineUserItems() {\r\n        if(this.state.users === null || this.state.users === undefined) {\r\n            if(UserContextHolder.onlineUsersHolder !== null) {\r\n                this.setState({users: UserContextHolder.onlineUsersHolder});\r\n            }\r\n            return (<div/>);\r\n        }\r\n        let users = this.state.users;\r\n\r\n        let result = users.map((value, index) => {\r\n            if(value.userId !== UserContextHolder.userHolder.userId) {\r\n                return (<OnlineUserItem user={value} onClick={this.onSendButtonClicked.bind(this)} isOnline={value.isOnline}/>);\r\n            } else {\r\n                return(<div/>);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default OnlineUsers;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport ChatRoom from \"./page/chat/ChatRoom\";\nimport UserContextHolder from \"./holder/UserContextHolder\";\nimport UserAction from \"./action/UserAction\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport OnlineUsers from \"./page/OnlineUsers\";\nimport ApiCaller from \"./api/ApiCaller\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false,\n            roomId: null,\n            roomTitle: undefined,\n            messages: undefined\n        };\n        this.chatRoom = null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true;\n    }\n\n    render() {\n        if (!this.state.isReady) {\n            this.getUserContext();\n            return (<div/>)\n        } else {\n            return (\n                <div>\n                    <AppBar position=\"static\" color={\"secondary\"}>\n                        <Toolbar>\n                            <Typography variant=\"h6\">\n                                Chatting room\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    <Grid\n                        alignItems=\"center\"\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        style={{\"padding\": \"20px\"}}\n                    >\n                        <Grid alignItems=\"center\" xs={3} style={{\"height\": \"auto\"}}>\n                            <Paper>\n                                <OnlineUsers onSendButtomClicked={this.prepareRoomForUser.bind(this)} users={UserContextHolder.userHolder.userDataDtoSet}/>\n                            </Paper>\n                        </Grid>\n\n                        <Grid alignItems=\"center\" xs={8}>\n                            <ChatRoom roomId={this.state.roomId} title={this.state.roomTitle} ref={(e) => {this.chatRoom = e}} messages={this.state.messages}/>\n                        </Grid>\n\n                    </Grid>\n                </div>\n            );\n        }\n    }\n\n    prepareRoomForUser(userId) {\n        ApiCaller.call(ApiCaller.PREPARE_ROOM, \"POST\", {\"userId\": userId},\n            (res) => {\n                this.setState(\n                    {\n                        roomId: res.roomId,\n                        roomTitle: res.roomTitle,\n                        messages: res.historicalMessagesDTO.messages\n                    }, () => {\n                    this.chatRoom.changeRoom(this.state.roomId, this.state.roomTitle, this.state.messages)\n                });\n            });\n    }\n\n    getSetUserHolder(res) {\n        UserContextHolder.userHolder = res;\n        this.setState({isReady: true, roomId: res.lastRoomId, roomTitle: res.roomTitle});\n    }\n\n    getUserContext() {\n        UserAction.getUserContext(this.getSetUserHolder.bind(this));\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}