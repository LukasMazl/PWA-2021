{"version":3,"sources":["component/MessageBox.js","component/MessageListViewer.js","config/GlobalConstant.js","api/ApiCaller.js","page/chat/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["MessageBox","message","this","props","author","messageAuthor","name","isMine","avatar","startsSequence","startSequence","endsSequence","endSequence","friendlyTimestamp","Date","className","join","container","direction","alignItems","title","aria-label","Avatar","alt","src","React","MessageListViewer","messages","console","log","length","messageBoxes","map","value","key","style","height","cols","spacing","GlobalConstant","FULL_WEB_SOCKET_URL","HTTP_PROTOCOL","DOMAIN_NAME","WEB_SOCKET_URL_SUFFIX","ApiCaller","url","data","callback","errorCallback","onResp","keys","Object","callUrl","call","method","fetch","headers","GLOBAL_CONST","mode","then","res","undefined","json","catch","ORIGIN_URL","REST_API_PREFIX","REST_API_ENDPOINT","GET_LAST_MESSAGES_FROM_ROOM","ChatRoom","state","isLoaded","clientRef","messageList","roomId","getLastDataForRoom","getCall","onGetMessage","error","justify","xs","id","label","multiline","defaultValue","variant","fullWidth","margin","width","marginRight","color","onClick","e","sendMessage","push","setState","marginTop","component","ref","disableSpacing","topics","onMessage","bind","client","renderTextForm","renderChat","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab6d99c4.chunk.js","sourcesContent":["import * as React from \"react\";\r\n//import moment from 'moment';\r\nimport './Message.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip/Tooltip\";\r\n\r\n\r\nclass MessageBox extends React.Component {\r\n\r\n    render() {\r\n        const message = this.props.message.message;\r\n        const author = this.props.author;\r\n        const messageAuthor = this.props.message.author.name;\r\n        const isMine = author !== messageAuthor;\r\n        const avatar = this.props.message.author.avatar;\r\n        const startsSequence = (this.props.startSequence) ? this.props.startSequence : \"start\";\r\n        const endsSequence = (this.props.endSequence) ? this.props.endSequence : \"end\";\r\n        const showTimestamp = false;\r\n        // const friendlyTimestamp = moment(new Date()).format('LLLL');\r\n        const friendlyTimestamp = \"\" + new Date();\r\n        return (\r\n            <div>\r\n\r\n                <div className={[\r\n                    'message',\r\n                    `${isMine ? 'mine' : ''}`,\r\n                    `${startsSequence ? 'start' : ''}`,\r\n                    `${endsSequence ? 'end' : ''}`\r\n                ].join(' ')}>\r\n                    {\r\n                        showTimestamp &&\r\n                        <div className=\"timestamp\">\r\n                            {friendlyTimestamp}\r\n                        </div>\r\n                    }\r\n                    <div className=\"bubble-container\">\r\n                        <Grid container\r\n                              direction=\"row\"\r\n                              alignItems=\"center\">\r\n                            <Grid>\r\n                                <Tooltip title={messageAuthor} aria-label=\"add\">\r\n                                    <Avatar alt=\"Remy Sharp\" src={avatar}>\r\n                                        B\r\n                                    </Avatar>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid>\r\n                                <div className=\"bubble\" title={friendlyTimestamp}>\r\n                                    {message}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n","import * as React from \"react\";\r\nimport MessageBox from \"./MessageBox\";\r\nimport GridList from \"@material-ui/core/GridList/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile/GridListTile\";\r\n\r\nclass MessageListViewer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const author = \"lukas.mazl\";\r\n        const messages = this.props.messages;\r\n        console.log(messages);\r\n        if (messages.length > 0) {\r\n            let messageBoxes = messages.map((value, key) => {\r\n                return (\r\n                        <MessageBox message={value} author={author}/>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <GridList style={{height: \"500px\"}} cols={2} spacing={1}>\r\n                    {messageBoxes}\r\n                </GridList>\r\n            );\r\n        } else {\r\n            return (<div/>);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default MessageListViewer;\r\n","class GlobalConstant {\r\n    static HTTP_PROTOCOL = \"http://\";\r\n    static DOMAIN_NAME = \"pwa-2021.herokuapp.com\";\r\n    static WEB_SOCKET_URL_SUFFIX =  \"/ws\";\r\n    static FULL_WEB_SOCKET_URL =  GlobalConstant.HTTP_PROTOCOL + GlobalConstant.DOMAIN_NAME + GlobalConstant.WEB_SOCKET_URL_SUFFIX;\r\n\r\n}\r\nexport default GlobalConstant;\r\n","import GLOBAL_CONST from \"../config/GlobalConstant\";\r\n\r\nclass ApiCaller {\r\n\r\n    static ORIGIN_URL = GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME;\r\n    static REST_API_PREFIX = \"/api/v1\";\r\n    static REST_API_ENDPOINT = ApiCaller.ORIGIN_URL + ApiCaller.REST_API_PREFIX;\r\n\r\n    static GET_LAST_MESSAGES_FROM_ROOM = ApiCaller.REST_API_ENDPOINT + \"/room/messages\";\r\n\r\n\r\n    static getCall(url, data, callback, errorCallback, onResp) {\r\n        const keys = Object.keys(data);\r\n        console.log(data);\r\n        console.log(keys);\r\n        let callUrl = url + \"?\";\r\n        for(let key in keys) {\r\n            callUrl += keys[key] + \"=\" + data[keys[key]] + \"&\";\r\n        }\r\n        console.log(callUrl);\r\n        this.call(callUrl, \"GET\", null, callback, errorCallback, onResp);\r\n    }\r\n\r\n    static call(url, method, data, callback, errorCallback, onResp) {\r\n        fetch(url, {\r\n            method: method,\r\n            headers: {\r\n                'Origin': GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Set-cookies, Authorization'\r\n            },\r\n            mode: \"cors\",\r\n            data: null\r\n        })\r\n            .then(res => {\r\n                if (onResp !== undefined) {\r\n                    return onResp(res);\r\n                } else {\r\n                    return res.json();\r\n                }\r\n            })\r\n            .then((data) => {\r\n                    callback(data);\r\n            })\r\n            .catch((data) => {\r\n                if (errorCallback !== undefined) {\r\n                    errorCallback(data);\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default ApiCaller;\r\n","import React from \"react\";\r\nimport SockJsClient from 'react-stomp';\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Divider from \"@material-ui/core/Divider/Divider\";\r\nimport Card from \"@material-ui/core/Card/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions/CardActions\";\r\nimport MessageListViewer from \"../../component/MessageListViewer\";\r\nimport ApiCaller from \"../../api/ApiCaller\";\r\nimport GlobalConstant from \"../../config/GlobalConstant\";\r\n\r\nclass ChatRoom extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            messages: []\r\n        };\r\n        this.clientRef = null;\r\n        this.messageList = null;\r\n    }\r\n\r\n    renderChat(roomId) {\r\n        this.getLastDataForRoom(roomId);\r\n        return (<div/>);\r\n    }\r\n\r\n    getLastDataForRoom(roomId) {\r\n        ApiCaller.getCall(\r\n            ApiCaller.GET_LAST_MESSAGES_FROM_ROOM,\r\n            {\r\n                \"roomID\": roomId\r\n            },\r\n            (res) => {\r\n                this.onGetMessage(res);\r\n            },\r\n            (res) => {\r\n                console.error(res);\r\n            });\r\n    }\r\n\r\n    renderTextForm(roomId) {\r\n        return (\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\">\r\n                <Grid xs={8}>\r\n                    <TextField\r\n                        id=\"message_text\"\r\n                        label=\"Message\"\r\n                        multiline\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={{margin: \"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                    <Button variant=\"contained\" style={{width: \"100%\", height: \"100%\", marginRight: \"10px\"}}\r\n                            color={\"primary\"}\r\n                            onClick={(e) => {\r\n                                this.clientRef.sendMessage(\"/app/send/\" + roomId, \"ahooj\");\r\n                            }}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    onMessage(message) {\r\n        console.log(message);\r\n        const messageList = this.state.messages;\r\n        messageList.push(message);\r\n        this.setState({messages: messageList});\r\n    }\r\n\r\n    render() {\r\n        const roomId = this.props.roomId;\r\n        if (!this.state.isLoaded) {\r\n            return this.renderChat(roomId)\r\n        } else {\r\n            return (\r\n                <Card style={{marginTop: \"20px\"}}>\r\n                    <CardHeader title={<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {roomId}\r\n                    </Typography>}/>\r\n                    <CardContent>\r\n                        <MessageListViewer messages={\r\n                            this.state.messages\r\n                        }\r\n                                           ref={(e) => this.messageList = e}/>\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        <SockJsClient url={GlobalConstant.FULL_WEB_SOCKET_URL} topics={['/topics/room/' + roomId]}\r\n                                      onMessage={this.onMessage.bind(this)}\r\n                                      ref={(client) => {\r\n                                          this.clientRef = client\r\n                                      }}/>\r\n                        {this.renderTextForm(roomId)}\r\n                    </CardActions>\r\n\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    onGetMessage(res) {\r\n        const messages = res.messages;\r\n        this.setState({\r\n            messages: messages,\r\n            isLoaded: true\r\n        });\r\n    }\r\n}\r\n\r\nexport default ChatRoom;\r\n","import React from 'react';\nimport './App.css';\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport ChatRoom from \"./page/chat/ChatRoom\";\n\nfunction App() {\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n            >\n                <Grid xs={3}>\n                    <Paper>\n                        Menu\n                    </Paper>\n                </Grid>\n                <Grid xs={5}>\n                        <ChatRoom roomId={\"testRoom\"}/>\n                </Grid>\n\n                <Grid xs={3}>\n                    <Paper>\n                        Uzivatel\n                    </Paper>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}