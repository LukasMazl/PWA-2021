{"version":3,"sources":["config/GlobalConstant.js","api/ApiCaller.js","holder/UserContextHolder.js","component/MessageBox.js","component/MessageListViewer.js","action/UserAction.js","page/chat/ChatRoom.js","component/user/OnlineUserItem.js","page/OnlineUsers.js","App.js","serviceWorker.js","index.js"],"names":["GlobalConstant","WEB_SOCKET_URL_SUFFIX","FULL_WEB_SOCKET_URL","HTTP_PROTOCOL","DOMAIN_NAME","ApiCaller","url","data","callback","errorCallback","onResp","callUrl","keys","Object","key","this","call","method","jsonData","JSON","stringify","request","headers","GLOBAL_CONST","mode","fetch","then","res","undefined","json","catch","console","log","ORIGIN_URL","REST_API_PREFIX","REST_API_ENDPOINT","GET_USER_CONTEXT","PREPARE_ROOM","GET_LAST_MESSAGES_FROM_ROOM","SEND_MESSAGE_TO_ROOM","UserContextHolder","user","userHolder","onlineUsers","onlineUsersHolder","MessageBox","message","props","messageAuthor","author","authorFullName","isMine","userId","avatar","userAvatar","startsSequence","startSequence","endsSequence","endSequence","friendlyTimestamp","Date","messageRowForTooltip","getMessageRowForTooltip","className","join","mine","Avatar","src","style","title","React","MessageListViewer","scrollArea","scrollBottom","messages","length","messageBoxes","map","value","ref","e","speed","minScrollSize","height","UserAction","roomId","onGetMessage","getCall","error","onRecive","resp","ChatRoom","state","roomTittle","isLoaded","clientRef","messageList","messageBox","getLastDataForRoom","nextProps","nextState","nextContext","bind","setState","forceUpdate","onRes","sendMessage","container","direction","justify","alignItems","xs","id","label","inputRef","multiline","defaultValue","variant","fullWidth","margin","width","marginRight","color","onClick","unshift","marginTop","component","disableSpacing","topics","onMessage","client","renderTextForm","renderChat","roomTitle","Component","StyledBadge","withStyles","theme","badge","backgroundColor","boxShadow","palette","background","paper","position","top","left","borderRadius","animation","border","content","transform","opacity","Badge","OnlineUserItem","prepareAvatar","isOnline","primary","userName","secondary","Fragment","overlap","anchorOrigin","vertical","horizontal","alt","OnlineUsers","users","onlineUser","prepareUsers","usersClone","userIndex","push","foundUserIndex","findUserIndex","list","onlineUserItems","getOnlineUserItems","onSendButtomClicked","index","onSendButtonClicked","App","isReady","chatRoom","prepareRoomForUser","userDataDtoSet","getUserContext","historicalMessagesDTO","changeRoom","lastRoomId","getSetUserHolder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d57b3372.chunk.js","sourcesContent":["class GlobalConstant {\r\n   // static HTTP_PROTOCOL = \"http://\";\r\n    //static DOMAIN_NAME = \"pwa-2021.herokuapp.com\";\r\n\r\n    static WEB_SOCKET_URL_SUFFIX = \"/ws\";\r\n\r\n    static HTTP_PROTOCOL = \"http://\";\r\n    static DOMAIN_NAME = \"localhost:8080\";\r\n    static FULL_WEB_SOCKET_URL = GlobalConstant.HTTP_PROTOCOL + GlobalConstant.DOMAIN_NAME + GlobalConstant.WEB_SOCKET_URL_SUFFIX;\r\n\r\n}\r\n\r\nexport default GlobalConstant;\r\n","import GLOBAL_CONST from \"../config/GlobalConstant\";\r\n\r\nclass ApiCaller {\r\n\r\n    static ORIGIN_URL = GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME;\r\n    static REST_API_PREFIX = \"/api/v1\";\r\n    static REST_API_ENDPOINT = ApiCaller.ORIGIN_URL + ApiCaller.REST_API_PREFIX;\r\n\r\n    static GET_USER_CONTEXT = \"/user/context\";\r\n    static PREPARE_ROOM = ApiCaller.REST_API_PREFIX + \"/room/prepare\";\r\n    static GET_LAST_MESSAGES_FROM_ROOM = ApiCaller.REST_API_ENDPOINT + \"/room/messages\";\r\n    static SEND_MESSAGE_TO_ROOM = ApiCaller.REST_API_ENDPOINT + \"/send\";\r\n\r\n    static getCall(url, data, callback, errorCallback, onResp) {\r\n        let callUrl = url;\r\n        if(data !== null) {\r\n            const keys = Object.keys(data);\r\n            callUrl = callUrl + \"?\";\r\n            for (let key in keys) {\r\n                callUrl += keys[key] + \"=\" + data[keys[key]] + \"&\";\r\n            }\r\n        }\r\n        this.call(callUrl, \"GET\", null, callback, errorCallback, onResp);\r\n    }\r\n\r\n    static call(url, method, data, callback, errorCallback, onResp) {\r\n        let jsonData = (data !== null)? JSON.stringify(data): null;\r\n\r\n        let request = {\r\n            method: method,\r\n            headers: {\r\n                'Origin': GLOBAL_CONST.HTTP_PROTOCOL + GLOBAL_CONST.DOMAIN_NAME,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Set-cookies, Authorization'\r\n            },\r\n            mode: \"cors\"\r\n        };\r\n\r\n        if(jsonData !== null) {\r\n            request[\"body\"] = jsonData;\r\n        }\r\n\r\n        fetch(url, request)\r\n            .then(res => {\r\n                if (onResp !== undefined) {\r\n                    return onResp(res);\r\n                } else {\r\n                    return res.json();\r\n                }\r\n            })\r\n            .then((data) => {\r\n                    callback(data);\r\n            })\r\n            .catch((data) => {\r\n                if (errorCallback !== undefined) {\r\n                    errorCallback(data);\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default ApiCaller;\r\n","import ApiCaller from \"../api/ApiCaller\";\r\n\r\nclass UserContextHolder {\r\n    static userHolder = null;\r\n    static onlineUsersHolder = null;\r\n\r\n    setUserContext(user) {\r\n        UserContextHolder.userHolder = user;\r\n    }\r\n\r\n    getUserContext() {\r\n        return UserContextHolder.userHolder;\r\n    }\r\n\r\n    setOnlineUsers(onlineUsers) {\r\n        UserContextHolder.onlineUsersHolder = onlineUsers;\r\n    }\r\n\r\n    getOnlineUsers() {\r\n        return UserContextHolder.userHolder;\r\n    }\r\n}\r\n\r\nexport default UserContextHolder;\r\n","import * as React from \"react\";\r\n//import moment from 'moment';\r\nimport './Message.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport UserContextHolder from \"../holder/UserContextHolder\";\r\n\r\n\r\nclass MessageBox extends React.Component {\r\n\r\n    render() {\r\n        const message = this.props.message.message;\r\n        const messageAuthor = this.props.message.author.authorFullName;\r\n        const isMine = this.props.message.author.userId === UserContextHolder.userHolder.userId;\r\n        const avatar = this.props.message.author.userAvatar;\r\n        const startsSequence = (this.props.startSequence) ? this.props.startSequence : \"start\";\r\n        const endsSequence = (this.props.endSequence) ? this.props.endSequence : \"end\";\r\n        const showTimestamp = false;\r\n        const friendlyTimestamp = \"\" + new Date();\r\n\r\n        let messageRowForTooltip = this.getMessageRowForTooltip(messageAuthor, avatar, message, isMine, friendlyTimestamp);\r\n        return (\r\n                <div className={[\r\n                    'message',\r\n                    `${isMine ? 'mine' : ''}`,\r\n                    `${startsSequence ? 'start' : ''}`,\r\n                    `${endsSequence ? 'end' : ''}`\r\n                ].join(' ')}>\r\n                    {\r\n                        showTimestamp &&\r\n                        <div className=\"timestamp\">\r\n                            {friendlyTimestamp}\r\n                        </div>\r\n\r\n\r\n                    }\r\n                    {messageRowForTooltip}\r\n                </div>\r\n        );\r\n    }\r\n\r\n    getMessageRowForTooltip(messageAuthor, avatar, message, mine, friendlyTimestamp) {\r\n        if (!mine) {\r\n            return (\r\n                <div className=\"bubble-container\">\r\n\r\n                        <Avatar src={avatar} style={{\"margin\": \"auto 0 auto 0\"}}>\r\n                            B\r\n                        </Avatar>\r\n                        <div className=\"bubble\" title={friendlyTimestamp}>\r\n                            {message}\r\n                        </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div className=\"bubble-container\">\r\n\r\n                    <div className=\"bubble\">\r\n                        {message}\r\n                    </div>\r\n                    <Avatar src={avatar} style={{\"margin\": \"auto 0 auto 0\"}}>\r\n                        B\r\n                    </Avatar>\r\n            </div>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default MessageBox;\r\n","import * as React from \"react\";\r\nimport MessageBox from \"./MessageBox\";\r\nimport ScrollArea from 'react-scrollbar';\r\n\r\nclass MessageListViewer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.scrollArea = null;\r\n    }\r\n\r\n    onNewMessage() {\r\n        if(this.scrollArea !== null) {\r\n            this.scrollArea.scrollBottom();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const messages = this.props.messages;\r\n        if (messages.length > 0) {\r\n            let messageBoxes = messages.map((value, key) => {\r\n                return (\r\n                        <MessageBox message={value}/>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <ScrollArea ref={(e) => {\r\n                    this.scrollArea = e;\r\n                }}\r\n                            speed={0.8}\r\n                            minScrollSize={400}\r\n                            style={{height: \"500px\"}}\r\n                >\r\n                    <div>\r\n                        {messageBoxes}\r\n                    </div>\r\n                </ScrollArea>\r\n            );\r\n        } else {\r\n            return (<div/>);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default MessageListViewer;\r\n","import ApiCaller from \"../api/ApiCaller\";\r\n\r\nclass UserAction {\r\n\r\n   static getLastDataForRoom(roomId, onGetMessage) {\r\n        ApiCaller.getCall(\r\n            ApiCaller.GET_LAST_MESSAGES_FROM_ROOM,\r\n            {\r\n                \"roomID\": roomId\r\n            },\r\n            (res) => {\r\n                onGetMessage(res);\r\n            },\r\n            (res) => {\r\n                console.error(res);\r\n            });\r\n    }\r\n\r\n    static sendMessage(roomId, value, onRecive) {\r\n        ApiCaller.call(ApiCaller.SEND_MESSAGE_TO_ROOM,\r\n            \"POST\",\r\n            {\r\n                \"roomId\": roomId,\r\n                \"message\": value\r\n            },\r\n            (resp) => {\r\n                onRecive();\r\n            }\r\n        );\r\n    }\r\n\r\n    static getUserContext(onRecive) {\r\n        ApiCaller.getCall(ApiCaller.GET_USER_CONTEXT,\r\n            null,\r\n            (resp) => {\r\n                onRecive(resp);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserAction;\r\n","import React from \"react\";\r\nimport SockJsClient from 'react-stomp';\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Card from \"@material-ui/core/Card/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions/CardActions\";\r\nimport MessageListViewer from \"../../component/MessageListViewer\";\r\nimport GlobalConstant from \"../../config/GlobalConstant\";\r\nimport UserAction from \"../../action/UserAction\"\r\n\r\nclass ChatRoom extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            roomId: props.roomId,\r\n            roomTittle: props.title,\r\n            isLoaded: props.messages !== undefined,\r\n            messages: props.messages\r\n        };\r\n        this.clientRef = null;\r\n        this.messageList = null;\r\n        this.messageBox = null;\r\n    }\r\n\r\n    renderChat(roomId) {\r\n        this.getLastDataForRoom(roomId);\r\n        return (<div/>);\r\n    }\r\n\r\n    changeRoom(roomId, title, messages) {\r\n        this.getLastDataForRoom(roomId, title, messages);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return true;\r\n    }\r\n\r\n    getLastDataForRoom(roomId, title, messages) {\r\n        if(messages === null || messages ===undefined) {\r\n            UserAction.getLastDataForRoom(roomId, this.onGetMessage.bind(this));\r\n        } else {\r\n            this.setState({\r\n                messages: messages,\r\n                isLoaded: true,\r\n                roomId: roomId,\r\n                roomTittle: title\r\n            });\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    sendMessage(roomId, value, onRes) {\r\n        UserAction.sendMessage(roomId, value, onRes);\r\n    }\r\n\r\n    renderTextForm(roomId) {\r\n        console.log(roomId);\r\n        return (\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\">\r\n                <Grid xs={8}>\r\n                    <TextField\r\n                        id=\"message_text\"\r\n                        label=\"Message\"\r\n                        inputRef={(e) => {\r\n                            this.messageBox = e\r\n                        }}\r\n                        multiline\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        style={{margin: \"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid xs={3}>\r\n                    <Button variant=\"contained\" style={{width: \"100%\", height: \"100%\", marginRight: \"10px\"}}\r\n                            color={\"primary\"}\r\n                            onClick={(e) => {\r\n                                const value = this.messageBox.value;\r\n                                this.sendMessage(roomId, value, () => {\r\n                                    this.messageBox.value = \"\";\r\n                                });\r\n                            }}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </Grid>\r\n                </Grid>\r\n        );\r\n    }\r\n\r\n    onMessage(message) {\r\n        const messageList = this.state.messages;\r\n        messageList.unshift(message);\r\n        this.setState({messages: messageList});\r\n    }\r\n\r\n    render() {\r\n        const roomId = this.state.roomId;\r\n        if (!this.state.isLoaded) {\r\n            return this.renderChat(roomId)\r\n        } else {\r\n            return (\r\n                <Card style={{marginTop: \"20px\"}}>\r\n                    <CardHeader title={\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {this.state.roomTittle}\r\n                        </Typography>\r\n                    }/>\r\n                    <CardContent>\r\n                        <MessageListViewer messages={\r\n                            this.state.messages\r\n                        }\r\n                                           ref={(e) => this.messageList = e}/>\r\n                    </CardContent>\r\n                    <CardActions disableSpacing>\r\n                        <SockJsClient url={GlobalConstant.FULL_WEB_SOCKET_URL} topics={['/topics/room/' + roomId]}\r\n                                      onMessage={this.onMessage.bind(this)}\r\n                                      ref={(client) => {\r\n                                          this.clientRef = client\r\n                                      }}/>\r\n                        {this.renderTextForm(roomId)}\r\n                    </CardActions>\r\n\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    onGetMessage(res) {\r\n        const messages = res.messages;\r\n        this.setState({\r\n            messages: messages,\r\n            isLoaded: true,\r\n            roomTittle: res.roomTitle,\r\n            roomId: res.roomId\r\n        });\r\n    }\r\n}\r\n\r\nexport default ChatRoom;\r\n","import {Component} from \"react\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\nimport {withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nclass OnlineUserItem extends Component {\r\n\r\n    render() {\r\n        let prepareAvatar = this.prepareAvatar(this.props.isOnline);\r\n\r\n        return (\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    {prepareAvatar}\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={this.props.user.userName}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                color=\"textPrimary\"\r\n                            >\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={\r\n                                    (e) =>\r\n                                    {this.props.onClick(this.props.user.userId)}\r\n                                }>\r\n                                    Send Message\r\n                                </Button>\r\n                            </Typography>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n            </ListItem>);\r\n    }\r\n\r\n    prepareAvatar(isOnline) {\r\n        if(isOnline) {\r\n            return (\r\n                <StyledBadge\r\n                    overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    <Avatar alt={this.props.user.userName} src={this.props.user.avatar} />\r\n                </StyledBadge>\r\n            );\r\n        } else {\r\n            return (\r\n                <Avatar alt={this.props.user.userName} src={this.props.user.avatar} />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default OnlineUserItem;\r\n","import {Component} from \"react\";\r\nimport SockJsClient from \"react-stomp\";\r\nimport GlobalConstant from \"../config/GlobalConstant\";\r\nimport React from \"react\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Divider from \"@material-ui/core/Divider/Divider\";\r\nimport OnlineUserItem from \"../component/user/OnlineUserItem\";\r\nimport UserContextHolder from \"../holder/UserContextHolder\";\r\n\r\nclass OnlineUsers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {users: props.users}\r\n    }\r\n\r\n    onMessage(data) {\r\n        UserContextHolder.onlineUsersHolder = data;\r\n        let onlineUser = this.prepareUsers(data);\r\n        this.setState({users: onlineUser});\r\n    }\r\n\r\n    prepareUsers(onlineUser) {\r\n        let usersClone = this.state.users;\r\n        let users = [];\r\n        for(let userIndex in usersClone) {\r\n            users.push(\r\n                {\r\n                    userId: usersClone[userIndex].userId,\r\n                    isOnline: false,\r\n                    userName: usersClone[userIndex].userName,\r\n                    avatar: usersClone[userIndex].avatar\r\n                }\r\n            );\r\n        }\r\n        if(onlineUser !== null && onlineUser !== undefined) {\r\n            for(let userIndex in onlineUser) {\r\n                let user = onlineUser[userIndex];\r\n                let foundUserIndex = this.findUserIndex(user.userId, users);\r\n\r\n                if(foundUserIndex == -1) {\r\n                    user.isOnline = true;\r\n                    users.push({\r\n                        userId: user[userIndex].userId,\r\n                        isOnline: true,\r\n                        userName: user[userIndex].userName,\r\n                        avatar: user[userIndex].avatar}\r\n                        );\r\n                } else {\r\n                    let inStateUser = users[foundUserIndex];\r\n                    inStateUser.isOnline = true;\r\n                }\r\n            }\r\n            return users;\r\n        }\r\n        return users;\r\n    }\r\n\r\n\r\n\r\n    findUserIndex(userId, list) {\r\n        if(list === null || list === undefined)\r\n            return -1;\r\n        for(let user in list) {\r\n            if(list[user].userId === userId) {\r\n                return user;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    render() {\r\n        let onlineUserItems = this.getOnlineUserItems();\r\n        return (\r\n            <div>\r\n                <SockJsClient url={GlobalConstant.FULL_WEB_SOCKET_URL} topics={['/topics/user/online']}\r\n                              onMessage={this.onMessage.bind(this)}\r\n                              ref={(client) => {\r\n                                  this.clientRef = client\r\n                              }}/>\r\n                <Typography variant=\"h4\" component=\"h4\" style={{\"textAlign\":\"center\"}}>\r\n                   Users\r\n                </Typography>\r\n                <Divider/>\r\n                <List>\r\n                    {onlineUserItems}\r\n                </List>\r\n                <Divider/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSendButtonClicked(userId) {\r\n        this.props.onSendButtomClicked(userId);\r\n    }\r\n\r\n    getOnlineUserItems() {\r\n        if(this.state.users === null || this.state.users === undefined) {\r\n            if(UserContextHolder.onlineUsersHolder !== null) {\r\n                this.setState({users: UserContextHolder.onlineUsersHolder});\r\n            }\r\n            return (<div/>);\r\n        }\r\n        let users = this.state.users;\r\n\r\n        let result = users.map((value, index) => {\r\n            if(value.userId !== UserContextHolder.userHolder.userId) {\r\n                return (<OnlineUserItem user={value} onClick={this.onSendButtonClicked.bind(this)} isOnline={value.isOnline}/>);\r\n            } else {\r\n                return(<div/>);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default OnlineUsers;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport ChatRoom from \"./page/chat/ChatRoom\";\nimport UserContextHolder from \"./holder/UserContextHolder\";\nimport UserAction from \"./action/UserAction\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport Button from \"@material-ui/core/Button/Button\";\nimport OnlineUsers from \"./page/OnlineUsers\";\nimport ApiCaller from \"./api/ApiCaller\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isReady: false,\n            roomId: null,\n            roomTitle: undefined,\n            messages: undefined\n        };\n        this.chatRoom = null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return true;\n    }\n\n    render() {\n        if (!this.state.isReady) {\n            this.getUserContext();\n            return (<div/>)\n        } else {\n            return (\n                <div>\n                    <AppBar position=\"static\" color={\"secondary\"}>\n                        <Toolbar>\n                            <Typography variant=\"h6\">\n                                Chatting room\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    <Grid\n                        alignItems=\"center\"\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        style={{\"padding\": \"20px\"}}\n                    >\n                        <Grid alignItems=\"center\" xs={3} style={{\"height\": \"auto\"}}>\n                            <Paper>\n                                <OnlineUsers onSendButtomClicked={this.prepareRoomForUser.bind(this)} users={UserContextHolder.userHolder.userDataDtoSet}/>\n                            </Paper>\n                        </Grid>\n\n                        <Grid alignItems=\"center\" xs={8}>\n                            <ChatRoom roomId={this.state.roomId} title={this.state.roomTitle} ref={(e) => {this.chatRoom = e}} messages={this.state.messages}/>\n                        </Grid>\n\n                    </Grid>\n                </div>\n            );\n        }\n    }\n\n    prepareRoomForUser(userId) {\n        ApiCaller.call(ApiCaller.PREPARE_ROOM, \"POST\", {\"userId\": userId},\n            (res) => {\n                this.setState(\n                    {\n                        roomId: res.roomId,\n                        roomTitle: res.roomTitle,\n                        messages: res.historicalMessagesDTO.messages\n                    }, () => {\n                    this.chatRoom.changeRoom(this.state.roomId, this.state.roomTitle, this.state.messages)\n                });\n            });\n    }\n\n    getSetUserHolder(res) {\n        UserContextHolder.userHolder = res;\n        this.setState({isReady: true, roomId: res.lastRoomId, roomTitle: res.roomTitle});\n    }\n\n    getUserContext() {\n        UserAction.getUserContext(this.getSetUserHolder.bind(this));\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}